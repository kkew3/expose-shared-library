name: CI

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
  push:
    tags:
      - '[0-9]*'

jobs:
  ci:
    name: CI for ${{ matrix.lang }} @ ${{ matrix.job.os }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        lang:
          - py
          - lua
        job:
          - { os: ubuntu-22.04, target: x86_64-unknown-linux-gnu }
          - { os: macos-14, target: aarch64-apple-darwin }
    steps:
      - uses: actions/checkout@v4

      - name: Setup python
        if: matrix.lang == 'py'
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Setup lua
        if: matrix.lang == 'lua'
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: '5.1.5'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          # As of 2025-02-17, the latest rustc version >1.77.2, which means
          # Windows 7 is not supported. To support Windows 7, we will need to
          # downgrade mlua's version in the lua example. However, for
          # illustrative purpose, we will keep the latest version here.
          targets: ${{ matrix.job.target }}
      - uses: Swatinem/rust-cache@v2

      - name: Show version information
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V
          case ${{ matrix.lang }} in
            py)
              python3 -V
              ;;
            lua)
              lua -v
              ;;
          esac

      - name: Build and check (without '--target')
        shell: bash
        run: |
          case ${{ matrix.lang }} in
            py)
              cd examples/mixed-rust-python-project
              find python -type f -name '*.so' -o -name '*.dll' -o -name '*.pyd' -exec rm -f {} +
              cargo clean
              cargo build --release
              cd python
              python3 main.py
              ;;
            lua)
              cd examples/mixed-rust-lua-project
              find lua -type f -name '*.so' -o -name '*.dll' -exec rm -f {} +
              cargo clean
              cargo build --release
              cd lua
              lua main.lua
              ;;
          esac
      - name: Build and check (with '--target')
        shell: bash
        run: |
          case ${{ matrix.lang }} in
            py)
              cd examples/mixed-rust-python-project
              find python -type f -name '*.so' -o -name '*.dll' -o -name '*.pyd' -exec rm -f {} +
              cargo clean
              cargo build --release --target=${{ matrix.job.target }}
              cd python
              python3 main.py
              ;;
            lua)
              cd examples/mixed-rust-lua-project
              find lua -type f -name '*.so' -o -name '*.dll' -exec rm -f {} +
              cargo clean
              cargo build --release --target=${{ matrix.job.target }}
              cd lua
              lua main.lua
              ;;
          esac

  ci_windows:
    name: CI for ${{ matrix.lang }} @ windows
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        lang:
          - py
          - lua
        job:
          - { os: windows-2022, target: x86_64-pc-windows-msvc }
    steps:
      - uses: actions/checkout@v4

      - name: Setup python
        if: matrix.lang == 'py'
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Setup lua
        if: matrix.lang == 'lua'
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: '5.1.5'
      - name: Copy lua lib
        if: matrix.lang == 'lua'
        shell: bash
        run: |
          cd .lua/lib
          cp lua51.dll liblua51.dll
          cp lua51.lib liblua51.lib
      - name: Create lua pc
        if: matrix.lang == 'lua'
        shell: bash
        run: |
          cd .lua
          echo 'V= 5.1' > lua51.pc
          echo 'R= 5.1.5' >> lua51.pc
          echo "prefix= $(pwd)" >> lua51.pc
          echo 'INSTALL_BIN= ${prefix}/bin' >> lua51.pc
          echo 'INSTALL_INC= ${prefix}/include' >> lua51.pc
          echo 'INSTALL_LIB= ${prefix}/lib' >> lua51.pc
          echo 'exec_prefix=${prefix}' >> lua51.pc
          echo 'libdir=${exec_prefix}/lib' >> lua51.pc
          echo 'includedir=${prefix}/include' >> lua51.pc
          echo 'Name: Lua' >> lua51.pc
          echo 'Description: An Extensible Extension Language' >> lua51.pc
          echo 'Version: ${R}' >> lua51.pc
          echo 'Requires:' >> lua51.pc
          echo 'Libs: -L${libdir} -llua51 -lm' >> lua51.pc
          echo 'Cflags: -I${includedir}' >> lua51.pc

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          # As of 2025-02-17, the latest rustc version >1.77.2, which means
          # Windows 7 is not supported. To support Windows 7, we will need to
          # downgrade mlua's version in the lua example. However, for
          # illustrative purpose, we will keep the latest version here.
          targets: ${{ matrix.job.target }}
      - uses: Swatinem/rust-cache@v2

      - name: Install pkg-config and friends
        shell: bash
        run: |
          mkdir -p .local
          curl -fSLO http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/pkg-config_0.26-1_win32.zip
          unzip pkg-config_0.26-1_win32.zip "bin/*.exe" -d .local
          rm pkg-config_0.26-1_win32.zip
          curl -fSLO http://ftp.gnome.org/pub/gnome/binaries/win32/glib/2.28/glib_2.28.8-1_win32.zip
          unzip glib_2.28.8-1_win32.zip "bin/*.dll" -d .local
          rm glib_2.28.8-1_win32.zip
          curl -fSLO http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/gettext-runtime_0.18.1.1-2_win32.zip
          unzip gettext-runtime_0.18.1.1-2_win32.zip "bin/*.dll" -d .local
          rm gettext-runtime_0.18.1.1-2_win32.zip

      - name: Show version information
        shell: bash
        run: |
          export PATH="$(pwd)/.local/bin:$PATH"
          gcc --version || true
          pkg-config --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V
          case ${{ matrix.lang }} in
            py)
              python3 -V
              ;;
            lua)
              lua -v
              ;;
          esac

      - name: Build and check (without '--target')
        shell: bash
        run: |
          export PATH="$(pwd)/.local/bin:$PATH"
          export PKG_CONFIG_PATH="$(pwd)/.lua:$PKG_CONFIG_PATH"
          case ${{ matrix.lang }} in
            py)
              cd examples/mixed-rust-python-project
              find python -type f -name '*.so' -o -name '*.dll' -o -name '*.pyd' -exec rm -f {} +
              cargo clean
              cargo build --release
              cd python
              python3 main.py
              ;;
            lua)
              cd examples/mixed-rust-lua-project
              find lua -type f -name '*.so' -o -name '*.dll' -exec rm -f {} +
              cargo clean
              cargo build --release
              cd lua
              lua main.lua
              ;;
          esac
      - name: Build and check (with '--target')
        shell: bash
        run: |
          export PATH="$(pwd)/.local/bin:$PATH"
          export PKG_CONFIG_PATH="$(pwd)/.lua:$PKG_CONFIG_PATH"
          case ${{ matrix.lang }} in
            py)
              cd examples/mixed-rust-python-project
              find python -type f -name '*.so' -o -name '*.dll' -o -name '*.pyd' -exec rm -f {} +
              cargo clean
              cargo build --release --target=${{ matrix.job.target }}
              cd python
              python3 main.py
              ;;
            lua)
              cd examples/mixed-rust-lua-project
              find lua -type f -name '*.so' -o -name '*.dll' -exec rm -f {} +
              cargo clean
              cargo build --release --target=${{ matrix.job.target }}
              cd lua
              lua main.lua
              ;;
          esac
